// Generated by IcedCoffeeScript 1.8.0-e
(function() {
  var _;

  _ = require('underscore');

  module.exports = function(shared) {
    var h;
    h = {};
    h.JSONResponse = function(doc) {

      /*
      format a proper JSON response for the document
       */
      return {
        headers: {
          'Content-Type': "application/json"
        },
        body: JSON.stringify(doc)
      };
    };
    h.sendNakedList = function(getRow, start, send, rowTransform) {

      /*
      lazily send a JSON serialized list of rows,
      each having been transformed by rowTransform.
      If rowTransform throws the string `"skip"`,
      the row will be skipped.
       */
      var e, first, row, transformedRow;
      start({
        headers: {
          'Content-Type': 'application/json'
        }
      });
      first = true;
      send('[');
      while ((row = getRow())) {
        try {
          transformedRow = rowTransform(row);
        } catch (_error) {
          e = _error;
          if (e === 'skip') {
            continue;
          } else {
            throw e;
          }
        }
        if (first) {
          first = false;
        } else {
          send(',');
        }
        send(JSON.stringify(transformedRow));
      }
      return send(']');
    };
    h.lists = {
      get_prepped: function(getRow, start, send, header, req) {

        /*
        must call with {get_docs: true}
        run all document through the appropriate prepDoc function defined in shared.prepDocFns
         */
        return h.sendNakedList(getRow, start, send, function(row) {
          return shared.prepDoc(row.doc);
        });
      },
      get_values: function(getRow, start, send, header, req) {

        /*
        return only the value from the passed view's map function
         */
        return h.sendNakedList(getRow, start, send, function(row) {
          return row.value;
        });
      },
      get_first_prepped: function(getRow, start, send, header, req) {

        /*
        must call with {get_docs: true}
        get the first returned document and run it through the prepDoc function
         */
        var preppedDoc, row;
        row = getRow();
        if (row) {
          start({
            headers: {
              'Content-Type': 'application/json'
            }
          });
          preppedDoc = shared.prepDoc(row.doc);
          return send(JSON.stringify(preppedDoc));
        } else {
          throw ['error', 'not_found', 'document matching query does not exist'];
        }
      },
      get_prepped_of_type: function(getRow, start, send, docType, header, req) {

        /*
        must call with {get_docs: true}
        only return documents of the specified type
        run all document through the appropriate prepDoc function defined in shared.prepDocFns
         */
        return h.sendNakedList(getRow, start, send, function(row) {
          var doc;
          doc = row.doc;
          if (shared.getDocType(doc) !== docType) {
            throw 'skip';
          }
          return shared.prepDoc(doc);
        });
      }
    };
    h.shows = {
      get_prepped: function(doc, req) {

        /*
        return the document after running through shared.prepDoc
         */
        var preppedDoc;
        preppedDoc = shared.prepDoc(doc);
        return h.JSONResponse(preppedDoc);
      }
    };
    return h;
  };

}).call(this);
